// ========================================================
// 数値から単位を取り除く
// =========================================================
@function strip-unit($number) {
    @if type-of($number)=='number'and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

// ========================================================
// 数値から単位を取り除くここまで
// =========================================================

// ========================================================
// px→remの計算
// 書き方
// .foo {
//   font-size: rem(36px);
// }
// =========================================================
@function rem($px, $base: 16px) {
    $value: $px;

    // 単位がpx以外の場合は警告を出してそのまま返す
    @if (unit($px) !='px') {
        @warn 'rem()の引数にpx以外の値を指定しても計算できません';
        @return $value;
    }

    $value: (strip-unit($px) / strip-unit($base)) * 1rem;

    @return $value;
}

// ========================================================
// px→remの計算ここまで
// =========================================================


//  ========================================================
// px→vwの計算 *デスクトップにvwは適さないので注意（大型モニタ・ズーム機能に不適）
// 書き方
// .foo {
//   width: vw(40px);
// }
// =========================================================
@function vw($px, $base: 375px) {
    $value: $px;

    // 単位がpx以外の場合は警告を出してそのまま返す
    @if (unit($px) !='px') {
        @warn 'vw()の引数にpx以外の値を指定しても計算できません';
        @return $value;
    }

    $value: (strip-unit($px) / strip-unit($base)) * 100vw;

    @return $value;
}

// ========================================================
// px→vwの計算 ここまで
// =========================================================


// ========================================================
// 画像などを縦横比を維持したままレスポンシブ対応
// 書き方
//  @include aspect-ratio(16, 9);
// =========================================================
@mixin aspect-ratio($width, $height) {
    position: relative;

    &::before {
        content: '';
        float: left;
        padding-top: ($height / $width) * 100%;
    }

    &::after {
        content: '';
        display: block;
        clear: both;
    }

    &> :first-child {
        height: 100%;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
    }
}

// ========================================================
// 画像などを縦横比を維持したままレスポンシブ対応ここまで
// =========================================================



// ========================================================
// z-index
// 書き方
// .hoge {
//   z-index: map-get($layer, "header");
// }
// 共通定義したドロワー内はz-index: map-get($layer, "drawer") + 1;
// あるいはz-index: map-get($layer, "drawer") - 1;など
// =========================================================
$layer: (modal: 100,
    drawer: 40,
    sp-menu: 35,
    floating: 30,
    header: 20,
    default: 1);
//  ========================================================
// z-indexここまで
// =========================================================


// ========================================================
//メインコード
//=========================================================
html {
    scroll-behavior: smooth;
}

body {
    margin: 0 auto;
    max-width: 1440px;
}

/* パーセントのmixin */
@function per($px, $base: 1440px) {
    $value: $px;

    // 単位がpx以外の場合は警告を出してそのまま返す
    @if (unit($px) !='px') {
        @warn '%()の引数にpx以外の値を指定しても計算できません';
        @return $value;
    }

    $value: (strip-unit($px) / strip-unit($base)) * 100%;

    @return $value;
}

// ========================================================
//メインコードここまで
//=========================================================